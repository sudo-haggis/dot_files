-- Basic Settings
vim.opt.number = true             -- Show line numbers
vim.opt.relativenumber = true     -- Show relative line numbers
vim.opt.mouse = 'a'               -- Enable mouse support
vim.opt.ignorecase = true         -- Case insensitive searching
vim.opt.smartcase = true          -- Case sensitive if caps used
vim.opt.wrap = false              -- Don't wrap lines
vim.opt.tabstop = 4               -- Tab width
vim.opt.shiftwidth = 4            -- Indent width
vim.opt.expandtab = true          -- Use spaces instead of tabs
vim.opt.clipboard = 'unnamedplus' -- Use system clipboard
vim.opt.termguicolors = true      -- Enable true color support
vim.opt.completeopt = 'menu,menuone,noselect'  -- Required for LSP

-- Set leader key to space
vim.g.mapleader = ' '

-- Plugin configuration with Packer
-- Make sure packer is installed before trying to use it
local ensure_packer = function()
  local fn = vim.fn
  local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
  if fn.empty(fn.glob(install_path)) > 0 then
    fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
    vim.cmd [[packadd packer.nvim]]
    return true
  end
  return false
end

local packer_bootstrap = ensure_packer()

-- Initialize packer
local status_ok, packer = pcall(require, 'packer')
if not status_ok then
  return
end

-- Use a protected call
packer.startup(function(use)
  -- Packer can manage itself
  use 'wbthomason/packer.nvim'
 
  -- Add vim-tmux-navigator
  use 'christoomey/vim-tmux-navigator'
  
  -- Colorscheme
  use {
    'folke/tokyonight.nvim',
    config = function()
      vim.cmd[[colorscheme tokyonight-storm]]
    end
  }
  
  -- LSP and completion plugins - carefully ordered
  use 'neovim/nvim-lspconfig'
  
  -- Uncomment these once the basic setup works
  -- use 'hrsh7th/nvim-cmp'
  -- use 'hrsh7th/cmp-nvim-lsp'
  -- use 'hrsh7th/cmp-buffer'
  -- use 'hrsh7th/cmp-path'
  -- use 'L3MON4D3/LuaSnip'
  -- use 'saadparwaiz1/cmp_luasnip'
  
  -- Go specific plugins
  -- use 'ray-x/go.nvim'
  -- use 'ray-x/guihua.lua'
  
  -- Treesitter for better syntax highlighting
  -- use {
  --   'nvim-treesitter/nvim-treesitter',
  --   run = ':TSUpdate'
  -- }
  
  -- Automatically set up configuration after cloning packer.nvim
  if packer_bootstrap then
    packer.sync()
  end
end)

-- Explicit tmux-navigator configuration
-- Set this to 1 to disable default mappings and use our explicit ones below
vim.g.tmux_navigator_no_mappings = 1

-- Set explicit mappings for tmux navigation
vim.api.nvim_set_keymap('n', '<C-h>', '<cmd>TmuxNavigateLeft<CR>', { silent = true, noremap = true })
vim.api.nvim_set_keymap('n', '<C-j>', '<cmd>TmuxNavigateDown<CR>', { silent = true, noremap = true })
vim.api.nvim_set_keymap('n', '<C-k>', '<cmd>TmuxNavigateUp<CR>', { silent = true, noremap = true })
vim.api.nvim_set_keymap('n', '<C-l>', '<cmd>TmuxNavigateRight<CR>', { silent = true, noremap = true })
vim.api.nvim_set_keymap('n', '<C-\\>', '<cmd>TmuxNavigatePrevious<CR>', { silent = true, noremap = true })

-- LSP Configuration - Load only if we have lspconfig
local has_lsp, lspconfig = pcall(require, 'lspconfig')
if not has_lsp then
  print("nvim-lspconfig not found, LSP features disabled")
  return
end

-- Once the basic setup works, uncomment and adjust the LSP configurations below
-- YAML Language Server setup
-- lspconfig.yamlls.setup{
--   settings = {
--     yaml = {
--       schemas = {
--         [vim.fn.expand("~/.config/schemas/docker-compose-schema.json")] = "/*docker-compose*.{yml,yaml}",
--         ["https:--json.schemastore.org/github-workflow.json"] = "/.github/workflows/*",
--       },
--     },
--   }
-- }

-- The Go autocmd
vim.api.nvim_create_autocmd('FileType', {
  pattern = 'go',
  callback = function()
    -- Make sure LSP is loaded before trying to use it
    local has_lsp, _ = pcall(require, 'lspconfig')
    if not has_lsp then return end
    
    local bufnr = vim.api.nvim_get_current_buf()
    local clients = vim.lsp.get_active_clients({ bufnr = bufnr })
    if #clients == 0 then
      vim.defer_fn(function()
        pcall(vim.cmd, 'LspStart gopls')
      end, 100)
    end
  end
})

-- The Arduino autocmd (separate call)
vim.api.nvim_create_autocmd('FileType', {
  pattern = "arduino",
  callback = function()
    -- Global Arduino mappings
    vim.api.nvim_set_keymap('n', '<F5>', ':!arduino-cli compile --fqbn arduino:avr:uno %:p<CR>', { noremap = true, silent = false })
    vim.api.nvim_set_keymap('n', '<F6>', ':!arduino-cli upload -p /dev/ttyACM0 --fqbn arduino:avr:uno %:p<CR>', { noremap = true, silent = false })
  end
})

vim.api.nvim_create_autocmd({"BufNewFile", "BufRead"}, {
  pattern = "*.ino",
  callback = function()
    vim.bo.filetype = "arduino"
  end
})

-- PHP Language Server setup - only configure if we have lspconfig
if has_lsp then
  local intelephense_setup = {
    settings = {
      intelephense = {
        stubs = {
          "bcmath", "bz2", "calendar", "Core", "curl", "date", 
          "dba", "dom", "enchant", "fileinfo", "filter", "ftp", 
          "gd", "gettext", "hash", "iconv", "imap", "intl", 
          "json", "ldap", "libxml", "mbstring", "mysqli", "mysqlnd", 
          "oci8", "openssl", "pcntl", "pcre", "PDO", "pdo_mysql", 
          "pdo_pgsql", "pdo_sqlite", "pgsql", "Phar", "posix", 
          "pspell", "readline", "Reflection", "session", "shmop", 
          "SimpleXML", "snmp", "soap", "sockets", "sodium", "SPL", 
          "sqlite3", "standard", "superglobals", "sysvmsg", "sysvsem", 
          "sysvshm", "tidy", "tokenizer", "xml", "xmlreader", 
          "xmlrpc", "xmlwriter", "xsl", "Zend OPcache", "zip", "zlib"
        },
        stubsLocation = vim.fn.expand('~/.config/intelephense/stubs'),
        files = {
          maxSize = 5000000
        },
        environment = {
          phpVersion = "8.2.0"
        },
        completion = {
          insertUseDeclaration = true,
          fullyQualifyGlobalConstantsAndFunctions = false,
          maxItems = 100
        },
        format = {
          enable = true
        },
        telemetry = {
          enable = false
        },
        diagnostics = {
          enable = true,
          undefinedTypes = false,
          undefinedFunctions = false,
          undefinedConstants = false,
          undefinedMethods = false
        }
      }
    },
    init_options = {
      licenceKey = nil,
      showFunctionSignatures = true,
      showDocumentationInSignatureHelp = true
    },
    on_attach = function(client, bufnr)
      -- Set keybindings
      vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', {noremap=true, silent=true})
      vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', {noremap=true, silent=true})
      vim.api.nvim_buf_set_keymap(bufnr, 'i', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', {noremap=true, silent=true})
    end
  }
  
  -- Protected call to setup intelephense
  pcall(function() lspconfig.intelephense.setup(intelephense_setup) end)
end

-- PHP-specific autocommand
vim.api.nvim_create_autocmd('FileType', {
  pattern = 'php',
  callback = function()
    -- Make sure LSP is loaded before trying to use it
    local has_lsp, _ = pcall(require, 'lspconfig')
    if not has_lsp then return end
    
    -- Set local keybindings for PHP files
    vim.api.nvim_buf_set_keymap(0, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', { noremap = true, silent = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '<leader>pd', '<cmd>lua vim.lsp.buf.definition()<CR>', { noremap = true, silent = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '<leader>pr', '<cmd>lua vim.lsp.buf.references()<CR>', { noremap = true, silent = true })
    
    -- For function signature help as you type
    vim.api.nvim_buf_set_keymap(0, 'i', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', { noremap = true, silent = true })
    
    -- Start LSP if not already running
    local bufnr = vim.api.nvim_get_current_buf()
    local clients = vim.lsp.get_active_clients({ bufnr = bufnr })
    if #clients == 0 then
      vim.defer_fn(function()
        pcall(vim.cmd, 'LspStart intelephense')
      end, 100)
    end
  end
})

-- Modify hover handler only if LSP is available
if has_lsp then
  pcall(function()
    vim.lsp.handlers["textDocument/hover"] = function(_, result, ctx, config)
      if not result or not result.contents then
        return
      end
      -- Call the default handler
      vim.lsp.with(vim.lsp.handlers.hover, config)(_, result, ctx, config)
    end
  end)
end
